{% extends 'base.html.twig' %}

{% block title %}Hello MatchingController!{% endblock %}

{% block body %}
    <div class="tinder--filter">
        <h6> {{ adrr }} </h6>
        <div id="map1" style="width:400px; height:200px;"></div>

        <div class="rangeslider">
            <input type="range" id="distance" name="distance"
                   min="5" max="500" value="10" class="myslider" step="5">
            <p>Distance préférée: <span id="valueDistance"></span></p>
        </div>

        <div class="rangeslider">
            <input type="range" id="age" name="age"
                   min="18" max="58" value="{{ ageUser }}" class="myslider" step="1">
            <p>Age préférée: <span id="valueAge"></span></p>
        </div>
        <button id="filter">filter</button>
        <button id="resetFiltre">Reset</button>
    </div>
    <div class="tinder">
        <div class="tinder--status">
            <i class="fa fa-remove"></i>
            <i class="fa fa-heart"></i>
        </div>
        <div class="tinder--cards">
            {% for i in interactions %}
                <div class="tinder--card" data-whatever="{{ i.idUser }}">
                    <img src="{{ asset('back/assets/img/users/'~ i.photoUser) }}">
                    {# <img src="https://placeimg.com/600/300/animals"> #}
                    <h3 align="left">{{ i.nomUser ~", " ~ i.getAge() }}</h3>

                    <h5 align="left" style="padding-left: 16px"><img
                                src="{{ asset('back/assets/img/Interaction/study.png') }}"
                                style="width: 5%;padding-right: 3px" class="img-icons" width="2%">{{ i.adresseUser }}
                    </h5>
                    <h5 align="left" style="padding-left: 16px"><img
                                src="{{ asset('back/assets/img/Interaction/location.png') }}"
                                style="width: 5%;padding-right: 3px" class="img-icons"
                                width="2%">à {{ i.distance(lat,lon,i.latitude,i.longitude) }} kilomètre</h5>

                    <p align="left">{{ i.descriptionUser }}</p>

                </div>
            {% endfor %}
        </div>
        <div class="tinder--buttons">
            <button id="nope"><i class="fa fa-remove"></i></button>
            <button id="love"><i class="fa fa-heart"></i></button>
        </div>
    </div>
    <script src="https://cpwebassets.codepen.io/assets/common/stopExecutionOnTimeout-1b93190375e9ccc259df3a57c1abc0e64599724ae30d7ea4c6877eb615f89387.js"></script>
    <script src='https://hammerjs.github.io/dist/hammer.min.js'></script>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js" integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ==" crossorigin=""></script>
    <script src="https://cdn.jsdelivr.net/npm/@opencage/geosearch-bundle"></script>
    <script src="https://cdn.jsdelivr.net/npm/@opencage/leaflet-opencage-geosearch"></script>
    <script id="rendered-js">
        'use strict';
        //map
        document.addEventListener('DOMContentLoaded', () => {

            // create and initialize leaflet map object
            var map = L.map('map1').setView([{{ lat }}, {{ lon }}], 15);
            var circle = L.circle([{{ lat }}, {{ lon }}], {
                color: 'red',
                fillColor: '#f03',
                fillOpacity: 0.5,
                radius: 200
            }).addTo(map);

            // load map tiles
            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png').addTo(map);
        });


        //slider
        var rangesliderDistance = document.getElementById("distance");
        var rangesliderAge = document.getElementById("age");
        var outputDistance = document.getElementById("valueDistance");
        var outputAge = document.getElementById("valueAge");
        outputDistance.innerHTML = rangesliderDistance.value;
        outputAge.innerHTML = rangesliderAge.value;

        rangesliderDistance.oninput = function() {
            outputDistance.innerHTML = this.value;
        }
        rangesliderAge.oninput = function() {
            outputAge.innerHTML = this.value;
        }


        var tinderContainer = document.querySelector('.tinder');
        var allCards = document.querySelectorAll('.tinder--card');
        var nope = document.getElementById('nope');
        var love = document.getElementById('love');

        function initCards(card, index) {
            var newCards = document.querySelectorAll('.tinder--card:not(.removed)');
            newCards.forEach(function (card, index) {
                card.style.zIndex = allCards.length - index;
                card.style.transform = 'scale(' + (20 - index) / 20 + ') translateY(-' + 30 * index + 'px)';
                card.style.opacity = (10 - index) / 10;
            });
            tinderContainer.classList.add('loaded');
        }

        initCards();
        allCards.forEach(function (el) {
            var hammertime = new Hammer(el);
            hammertime.on('pan', function (event) {
                el.classList.add('moving');
            });
            hammertime.on('pan', function (event) {
                if (event.deltaX === 0) return;
                if (event.center.x === 0 && event.center.y === 0) return;
                tinderContainer.classList.toggle('tinder_love', event.deltaX > 0);
                tinderContainer.classList.toggle('tinder_nope', event.deltaX < 0);
                var xMulti = event.deltaX * 0.03;
                var yMulti = event.deltaY / 80;
                var rotate = xMulti * yMulti;
                event.target.style.transform = 'translate(' + event.deltaX + 'px, ' + event.deltaY + 'px) rotate(' + rotate + 'deg)';
            });
            hammertime.on('panend', function (event) {
                el.classList.remove('moving');
                tinderContainer.classList.remove('tinder_love');
                tinderContainer.classList.remove('tinder_nope');
                var moveOutWidth = document.body.clientWidth;
                var keep = Math.abs(event.deltaX) < 80 || Math.abs(event.velocityX) < 0.5;
                event.target.classList.toggle('removed', !keep);
                if (keep) {
                    event.target.style.transform = '';
                } else {
                    var endX = Math.max(Math.abs(event.velocityX) * moveOutWidth, moveOutWidth);
                    var toX = event.deltaX > 0 ? endX : -endX;
                    var endY = Math.abs(event.velocityY) * moveOutWidth;
                    var toY = event.deltaY > 0 ? endY : -endY;
                    var xMulti = event.deltaX * 0.03;
                    var yMulti = event.deltaY / 80;
                    var rotate = xMulti * yMulti;

                    event.target.style.transform = 'translate(' + toX + 'px, ' + (toY + event.deltaY) + 'px) rotate(' + rotate + 'deg)';
                    initCards();
                }
            });
        });

        function createButtonListener(love) {
            return function (event) {
                var cards = document.querySelectorAll('.tinder--card:not(.removed)');
                var moveOutWidth = document.body.clientWidth * 1.5;
                if (!cards.length) return false;
                var card = cards[0];
                card.classList.add('removed');
                var idu = card.getAttribute('data-whatever');
                if (love) {
                    console.log(idu);
                    var url = "{{ path('addInteraction') }}";
                    var type = "o";
                    var data = {type: type, iduser: idu};
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: data,
                        dataType: "json",
                        processData: true,
                        error: function (err) {
                            console.error(err);
                        },
                        success: function (data) {
                            console.log(data);
                            card.style.transform = 'translate(' + moveOutWidth + 'px, -100px) rotate(-30deg)';
                        },
                        complete: function () {
                            console.log("Request finished.");
                        }
                    });
                } else {
                    var url = "{{ path('addInteraction') }}";
                    var type = "x";
                    var data = {type: type, iduser: idu};
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: data,
                        dataType: "json",
                        processData: true,
                        error: function (err) {
                            console.error(err);
                        },
                        success: function (data) {
                            console.log(data);
                            card.style.transform = 'translate(-' + moveOutWidth + 'px, -100px) rotate(30deg)';
                        },
                        complete: function () {
                            console.log("Request finished.");
                        }
                    });
                }
                initCards();
                event.preventDefault();
            };
        }

        var nopeListener = createButtonListener(false);
        var loveListener = createButtonListener(true);

        nope.addEventListener('click', nopeListener);
        love.addEventListener('click', loveListener);
        //# sourceURL=pen.js
    </script>
{% endblock %}